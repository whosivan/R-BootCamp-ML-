{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Consolas;
\f3\fnil\fcharset136 PingFangTC-Regular;}
{\colortbl;\red255\green255\blue255;\red201\green113\blue0;\red27\green31\blue34;\red255\green255\blue255;
\red0\green0\blue255;\red137\green152\blue14;\red21\green23\blue26;\red244\green246\blue249;\red203\green35\blue57;
\red6\green33\blue79;\red7\green68\blue184;\red255\green0\blue0;\red0\green186\blue251;\red0\green0\blue0;
\red71\green204\blue252;\red0\green90\blue124;\red164\green8\blue0;\red217\green11\blue0;\red255\green39\blue18;
\red0\green68\blue254;\red217\green11\blue0;\red0\green68\blue254;\red255\green128\blue0;\red174\green0\blue240;
\red46\green111\blue253;\red254\green73\blue64;}
{\*\expandedcolortbl;;\csgenericrgb\c78824\c44314\c0;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;
\csgenericrgb\c0\c0\c100000;\csgenericrgb\c53725\c59608\c5490;\cssrgb\c10588\c12157\c13725\c4706;\cssrgb\c96471\c97255\c98039;\cssrgb\c84314\c22745\c28627;
\cssrgb\c1176\c18431\c38431;\cssrgb\c0\c36078\c77255;\csgenericrgb\c100000\c0\c0;\csgenericrgb\c0\c72941\c98431;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c27843\c80000\c98824;\csgenericrgb\c0\c35294\c48627;\csgenericrgb\c64314\c3137\c0;\csgenericrgb\c85098\c4314\c0;\csgenericrgb\c100000\c15294\c7059;
\csgenericrgb\c0\c26667\c99608;\csgenericrgb\c85098\c4314\c0;\csgenericrgb\c0\c26667\c99608;\csgenericrgb\c100000\c50000\c0;\csgenericrgb\c68235\c0\c94118;
\csgenericrgb\c18039\c43529\c99216;\csgenericrgb\c99608\c28627\c25098;}
\margl1440\margr1440\vieww19320\viewh21300\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf2 \ul \ulc2 Markdown Syntax  ({\field{\*\fldinst{HYPERLINK "https://stackedit.io/editor"}}{\fldrslt https://stackedit.io/editor}})
\fs24 \cf0 \ulnone \

\b0\fs20 \
#(#####) text											
\f1\b\fs28 \cf3 \cb4 \expnd0\expndtw0\kerning0
Heading
\f0\b0 \cf0 \cb1 \kerning1\expnd0\expndtw0  
\fs20 \
*text* 
\b or
\b0  _text_											
\i Italic
\i0 \
**text**	 
\b or 
\b0 <b>text</b> 										
\b Bold
\b0 \
~~text~~											
\f1 \cf3 \cb4 \expnd0\expndtw0\kerning0
\strike \strikec3 Strikethrough
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \strike0\striked0 \
- (* or +) text											
\f1 \cf3 \cb4 \'95 \expnd0\expndtw0\kerning0
Unordered list
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
1. text												1. Ordered list\
[Alt texts](URL 
\b or
\b0  path)										\cf5 \ul \ulc5 Alt text\cf0 \ulnone \
<URL 
\b or
\b0  path>											\cf5 \ul URL\cf0 \ulnone  
\b or
\b0  \cf5 \ul path\cf0 \ulnone \
![alt text](image URL 
\b or
\b0  path)									Inline Image Display\
![alt text][logo] \cf6 where\cf0  [logo]: image url 
\b or
\b0  path							Reference Image Display\
>  paragraphs 
\b or
\b0  text										Block Quote\
$$text$$											Center Display\
`text`												I
\f1 \cf3 \cb4 \expnd0\expndtw0\kerning0
nline 
\f2 \cb7 code
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
```python\
s = \'93Hello World!\'94										
\f2 \cf3 \cb8 \expnd0\expndtw0\kerning0
s \cf9 =\cf3  \cf10 \'93Hello World!\'93
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
print (s)												
\f2 \cf11 \cb8 \expnd0\expndtw0\kerning0
print\cf3  (s)
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
```	\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 2.tiff \width3480 \height1220
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 								{{\NeXTGraphic Pasted Graphic 1.tiff \width3840 \height1600
}¬}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs20 \cf0 \'97\'97\'97												Thin Horizontal Line\
***												Thick Horizontal Line\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 5.tiff \width5360 \height520
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 					{{\NeXTGraphic Pasted Graphic 4.tiff \width4000 \height580
}¬}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf12 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\cf2 \ul \
\

\fs28 Git/GitHub Syntax  ({\field{\*\fldinst{HYPERLINK "https://stackedit.io/editor"}}{\fldrslt https://education.github.com/git-cheat-sheet-education.pdf}})
\fs24 \
\cf12 \ulnone \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \ul \ulc2 \

\fs28 SQL ({\field{\*\fldinst{HYPERLINK "https://www.codecademy.com/articles/sql-commands?r=master"}}{\fldrslt https://www.codecademy.com/articles/sql-commands?r=master}})
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs20 \cf13 \ulnone \
CREATE TABLE
\b0 \cf0  table (col dtype, etc);								Create a table with table_name and parameters.\

\b \cf13 \
SELECT
\b0 \cf0  *(or col) 
\b \cf13 FROM
\b0 \cf0  table;									Fetch data [col_name or 
\i everything(*)
\i0 ] from table_name\

\b \cf13 \
INSERT INTO
\b0 \cf0  table (col) 
\b \cf13 VALUES
\b0 \cf0  (contents);							Insert 
\b \ul \ulc2 new rows
\b0 \ulnone  into table_name (col) with values (contents)\

\b \cf13 \
UPDATE
\b0 \cf0  table 
\b \cf13 SET 
\b0 \cf0 col = new value
\b \cf13  WHERE
\b0 \cf0  col = condition;					Update row(s) in table_name, Set col to new value, Where row condition met\

\b \cf13 \
ALTER TABLE
\b0 \cf0  table 
\b \cf13 ADD COLUMN
\b0 \cf0  col dtype;							Alter Table add 
\b \ul \ulc2 new col
\b0 \ulnone  to table_name\

\b \cf13 \
DELETE\cf0  \cf13 FROM
\b0 \cf0  table 
\b \cf13 WHERE
\b0 \cf0  col 
\b \cf13 IS\cf0  \cf13 NULL
\b0 \cf0 ; 							Delete row(s) from table_name Where row condition met\

\b \cf13 \
SELECT
\b0 \cf0  
\b \cf13 DISTINCT
\b0 \cf0  col 
\b \cf13 FROM
\b0 \cf0  table;								Fetch unique values in the result set\

\b \cf13 \
WHERE
\b0 \cf0  (=, != , >, <, >=, <=, 
\b \cf13 LIKE
\f3\b0 \cf14 , 
\b \cf13 BETWEEN
\b0 \cf14 ,
\b \cf13  %
\b0 \cf14 A
\b , \cf13 %
\b0 \cf14 a
\b , \cf13 %
\b0 \cf14 xxx
\b \cf13 %
\f0\b0 \cf0 );				Query filtering (LIKE searches similar str, %A, %a search starts with \'91A\'92 or \'91a\'92, or contain \'91xxx\'92, \
	
\b \cf13 AND
\b0 \cf0  condition1 
\b \cf13 OR
\b0 \cf0  condition2, 
\b \cf13 IS NULL
\b0 \cf0 , 
\b \cf13 IS NOT NULL
\b0 \cf0 					Between for range filter), combine multiple conditions using AND OR\

\b \cf13 \
ORDER\cf0  \cf13 BY
\b0 \cf0  col 
\b \cf13 DESC
\b0 \cf0 /
\b \cf13 ASC
\b0 \cf0 ;
\b \cf15 									
\b0 \cf14 Sort result set by col_name in descending (DESC) or ascending (ASC) order\

\b \cf13 DESC LIMIT
\b0 \cf14  3;											Specify the max number of result sets (like df.head(x))\

\b \cf13 \
SELECT
\b0 \cf0  
\b \cf13 COUNT
\b0 \cf0 (*) 
\b \cf13 FROM
\b0 \cf0  table;								Count() takes col_name and count number of rows\

\b \cf13 \
SELECT
\b0 \cf0  col, 
\b \cf13 COUNT
\b0 \cf0 (*) 
\b \cf13 FROM
\b0 \cf0  table 
\b \cf13 GROUP
\b0 \cf0  
\b \cf13 BY
\b0 \cf0  col;						Used with SELECT to arrange identical data into groups.\

\b \cf13 \
SELECT
\b0 \cf0  
\b \cf13 SUM
\b0 \cf0 (col) 
\b \cf13 FROM
\b0 \cf0  table;									Sum all the values within the col_name\

\b \cf13 \
SELECT
\b0 \cf0  
\b \cf13 MAX
\b0 \cf0 (col) 
\b \cf13 FROM
\b0 \cf0  table;									Return largest value from the fetched col_name\

\b \cf13 \
SELECT
\b0 \cf0  
\b \cf13 MIN
\b0 \cf0 (col) 
\b \cf13 FROM
\b0 \cf0  table;									Return smallest value from the fetched col_name\

\b \cf13 \
SELECT
\b0 \cf0  
\b \cf13 AVG
\b0 \cf0 (col) 
\b \cf13 FROM
\b0 \cf0  table;									Return average value from the fetched col_name\

\b \cf13 \
SELECT
\b0 \cf0  
\b \cf13 ROUND
\b0 \cf0 (
\b \cf13 AVG
\b0 \cf0 (col), decimal#) 
\b \cf13 FROM
\b0 \cf0  table;						Return rounded(decimal#) average value from the fetched col_name\

\b \cf13 \
CREATE TABLE
\b0 \cf0  table (id INTEGER PRIMARY KEY, etc.)					Create a table_name specifying id col is primary key col, no NULL and unique\

\b \cf13 \
SELECT
\b0 \cf0  table1.col1, table1.col2, table2.col1 (etc.) 
\b \cf13 FROM
\b0 \cf0  table1, table2;				Fetch data from multiple tables 
\i\b (cross join)
\i0\b0 \

\b \cf13 \
SELECT
\b0 \cf0  * 
\b \cf13 FROM
\b0 \cf0  table1 
\b \cf13 JOIN
\b0 \cf0  table2 
\b \cf13 ON
\b0 \cf0  table1.col = table2.col;					Fetch data from multiple tables while combining rows if join condition is true 
\i\b (inner join)\

\i0 \cf13 \
SELECT\cf0  
\b0 * 
\b \cf13 FROM
\b0 \cf0  table1 
\b \cf13 LEFT
\b0 \cf0  
\b \cf13 JOIN
\b0 \cf0  table2 
\b \cf13 ON
\b0 \cf0  table1.col = table2.col;				Table1 is fully fetched, table2 is joined onto table1 when condition is met 
\i\b (left join)\

\i0 \cf13 \
SELECT
\b0 \cf0  table1.col1 
\b \cf13 AS
\b0 \cf0  \'91xxx\'92, table2.col1 
\b \cf13 AS
\b0 \cf0  \'91yyy\'92 
\b \cf13 FROM
\b0 \cf0  table1 
\b \cf13 JOIN
\b0 \cf0  table2 
\b \cf13 ON
\b0 \cf0  condition;	Fetch table1.col1 data and rename col AS \'91xxx\'92\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf16 SELECT
\b0 \cf0  * 
\b \cf16 FROM
\b0 \cf0  table1 
\b \cf16 WHERE
\b0 \cf0  col 
\b \cf16 IN
\b0 \cf0  (
\b \cf13 SELECT
\b0 \cf0  col 
\b \cf13 FROM
\b0 \cf0  table2 
\b \cf13 WHERE
\b0 \cf0  condition);		Subquery within a query fetching data (non-correlated subquery)\
	
\i\b \cf12 ex.
\i0\b0 \cf0 \

\i\b \cf17 SELECT
\b0 \cf0  a.dep_month, a.dep_day_of_week, 
\b \cf17 AVG
\b0 \cf0 (a.flight_distance) 
\b \cf17 AS
\b0 \cf0  average_distance	\cf18 *** 
\i0 \cf0 The inner query fetched distance, month, day, which is then used by the outer query to
\i \

\b \cf17 FROM
\b0 \cf0  (												
\i0 compute the average total distance flown by day of week and month
\i \
	
\b \cf19 SELECT
\b0 \cf0  dep_month, dep_day_of_week, dep_date, 
\b \cf19 sum
\b0 \cf0 (distance) 
\b \cf19 AS
\b0 \cf0  flight_distance	
\b (Ex from CodeAcademy SQL:Table Transformation Subqueries 4) \cf18 ***
\b0 \cf0 \
	
\b \cf19 FROM
\b0 \cf0  flights \
	
\b \cf19 GROUP
\b0 \cf0  
\b \cf19 BY
\b0 \cf0  1, 2, 3\
	) a\

\b \cf16 GROUP
\b0 \cf0  
\b \cf16 BY
\b0 \cf0  1, 2\

\b \cf16 ORDER
\b0 \cf0  
\b \cf16 BY
\b0 \cf0  1, 2;\

\i0\b \cf16 \
SELECT
\b0 \cf0  col 
\b \cf16 FROM
\b0 \cf0  table 
\b \cf16 AS
\b0 \cf0  t 
\b \cf16 WHERE
\b0 \cf0  condition < (						A row is processed in the outer query, such that particular row in the outer query, the 	
\b \cf13 SELECT
\b0 \cf0  
\b \cf13 AVG
\b0 \cf0 (condition) 								subquery is executed. To identify correlated query, spot whether inner query is linked to\
	
\b \cf13 FROM
\b0 \cf0  table 										outer query using t.col =(<, > or other operators) table.col\
	
\b \cf13 WHERE
\b0 \cf0  col = t.col);\
\

\b \cf16 SELECT
\b0 \cf0  col(s) 
\b \cf16 FROM
\b0 \cf0  table1 
\b \cf16 UNION (ALL)
\b0 \cf0  
\b \cf16 SELECT
\b0 \cf0  col(s) 
\b \cf16 FROM
\b0 \cf0  table2;			Merge cols from tables, statement must same # of col and dtype (distinct default unless ALL)\
\

\b \cf16 SELECT
\b0 \cf0  col(s) 
\b \cf16 FROM
\b0 \cf0  table1 
\b \cf16 INTERSECT
\b0 \cf0  
\b \cf16 SELECT
\b0 \cf0  col(s) 
\b \cf16 FROM
\b0 \cf0  table2;				Combine and return only common rows between two SELECTs\
\

\b \cf16 SELECT
\b0 \cf0  col(s) 
\b \cf16 FROM
\b0 \cf0  table1 
\b \cf16 EXCEPT
\b0 \cf0  
\b \cf16 SELECT
\b0 \cf0  col(s) 
\b \cf16 FROM
\b0 \cf0  table2;				Returns distinct rows from the 1st SELECT that aren\'92t output by the 2nd SELECT\
\

\b \cf17 SELECT
\b0 \cf0  \
	
\b \cf17 CASE											
\b0 \cf14 If, then, else in SQL is done using CASE,\cf0 \
		
\b \cf17 WHEN
\b0 \cf0  elevation < 500 
\b \cf17 THEN
\b0 \cf0  \'91Low\'92						END is required to terminate the statement, ELSE is optional and return NULL is not included\
		
\b \cf17 WHEN
\b0 \cf0  elevation 
\b \cf17 BETWEEN
\b0 \cf0  500 
\b \cf17 AND
\b0 \cf0  1999 
\b \cf17 THEN
\b0 \cf0  \'91Medium\'92\
		
\b \cf17 WHEN
\b0 \cf0  elevation >= 2000 
\b \cf17 THEN
\b0 \cf0  \'91High\'92\
		
\b \cf17 ELSE
\b0 \cf0  \'91Unknown\'92\
	
\b \cf17 END
\b0 \cf0  
\b \cf17 AS
\b0 \cf0  elevation_tier, count(*)\

\b \cf17 FROM
\b0 \cf0  airports\

\b \cf17 GROUP
\b0 \cf0  
\b \cf17 BY
\b0 \cf0  1;\
\

\b \cf16 SELECT
\b0 \cf0  
\b \cf16 DATETIME 
\b0 \cf14 or
\b \cf16  DATE 
\b0 \cf14 or
\b \cf16  TIME
\b0 \cf0 (datetime_col. \'91+5 hours\'92) 
\b \cf16 FROM
\b0 \cf0  table;			Output YYYY-MM-DD hh:mm:ss format for datetime_col, \'91+5 hours\'92 for time increment.\
\

\b \cf16 SELECT
\b0 \cf0  str1 || \'91 \'91 || str2 
\b \cf16 AS
\b0 \cf0  new_str 
\b \cf16 FROM
\b0 \cf0  table;						Concatenate two strings into one, space in between || \'91 \'91 || matters\
\

\b \cf16 SELECT
\b0 \cf0  
\b \cf16 REPLACE
\b0 \cf0 (col, \'91str_want_to_be_replaced\'92, \'92new_str\'92) 
\b \cf16 AS
\b0 \cf0  alias 
\b \cf16 FROM
\b0 \cf0  table;		Replace selected str into new str within the selected col\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs24 \cf2 \ul \ulc2 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf12 \ulnone \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\cf2 \ul \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf2 Python
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0\fs20 \cf0 \ulnone \
re.search(\'91Phd | P.h.D | Ph.D.\'92, the list you want to search within.strip()) != None, Phd +=1		
\f1 \cf3 \cb4 \expnd0\expndtw0\kerning0
Regular expression of Python, search similar str within data structure, if yes add count 1\

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 re.search(\'91^Asso.\'92, the list you want to search within.strip()) != None, Asso +=1			Regular expression of Python, search str starts with \'91
\i Asso\'92
\i0  in data structure, if yes count +1\
pd.read_csv(\'91file.csv\'92, parse_dates = [col index])							Parse_date tells read_csv to interpret values in col 5 as dates and convert into np datetime64\
pyplot.xticks(rotation = 30)									Rotating x-axis label by 30 degree counterclockwise\
pd.rolling_mean(series, window_size)								Pandas rolling mean attribute takes in a series, and an int representing window size\
pd.ewma(series, window_size)									Pandas exponentially-weighted moving average takes in a series, and an span number (int)\
df.series.fillna(ewma, in place = True)								Replaces missing data with corresponding value from ewma, typical handle on missing data\
\

\b\fs28 \cf2 \ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf12 \ulnone \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\fs28 \cf2 \ul \ulc2 \
\
R ({\field{\*\fldinst{HYPERLINK "https://cran.r-project.org/doc/contrib/Short-refcard.pdf"}}{\fldrslt https://cran.r-project.org/doc/contrib/Short-refcard.pdf}})\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf2 \ulc2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone \'97\'97\'97Variables \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0\fs20 \
x <- 2L												R method of assigning \ul integer\ulnone  to an variable\
x <- 2.5												R method of assigning \ul double(float)\ulnone  to an variable\
x <- 3 + 2i											R method of assigning \ul complex\ulnone  to an variable\
x <- \'93str\'94											R method of assigning \ul character(str)\ulnone  to an variable\
q <- TRUE(T) or FALSE(F)									R method of assigning \ul boolean(T/F)\ulnone  to an variable\
10 %% 8											R method of return only the reminder of the division (In this case it returns 2)\
typeof()	 
\b OR
\b0  class()										Attribute of finding the type of variable\
paste(charac1, charac2)										Character(string) addition in R\
R1 <- 4 > 5	R2 <- !(5>1)									R1 Check the statement on the right and return either T or F into variable, R2 assigns (NOT(TRUE)) == (FALSE) as variable\
R1 | R2												Check either R1 or R2 is TRUE, if one of them is true return TRUE\
R1 & R2											Check both R1 and R2 are TRUE, if both of them are true return TRUE, else FALSE\
isTRUE(var)											Check if variable is TRUE\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf14 rm(var)												Remove existing variable\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs24 \cf0 \'97\'97\'97Loops \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0\fs20 \
while(var < value)\{										
\b While loop
\b0  in R, \cf20 while(condition)\{perform this task\},\cf0  
\b \cf18 \ul \ulc18 EX\ulnone [
\b0 \cf0 counter <- 1, while(counter < 12)\{print(counter) counter <- counter + 1\}
\b \cf18 ]
\b0 \cf0 \
    do something	 
\b #break
\b0 										
\b #break command will break and terminate the loop Python: break
\b0 \
\}								
\b \cf21 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf14 \
for(condition)\{											
\b For loop
\b0  in R,\cf20  for(condition)\{perform this task\}\cf14 , 
\b \cf18 \ul \ulc2 EX\ulnone [
\b0 \cf0  for(i in 1:5)\{print(\'93hello\'94\} 
\b \cf18 ]  #for i in 1 to 5 (1-5), print hello each time
\b0 \cf14 \
    do something											
\b #R can be itemize as Python, \cf12 EX[\cf14 v <- c(1, 2, 3), for(number in v)\{code\} works in R\cf12 ]
\b0 \cf14 \
\}									\cf14 			
\b #matrix iteration in forloop is by col (col1 -> col2 -> col3)
\b0 \
												
\b If loop
\b0  in R, \cf22 if(condition)\{perform this task\} else if(condition2)\{perform this task\} else\{perform this task\}\cf14 \
x <- rnorm(1) 											#random normal distribution with n = 1\
if(x > 1)\{											#if loop in R, if x is less than 1\
  answer <- "Greater than 1" 									#then print statement\
\} else if(x >= -1)\{										#else if x is greater or equal to -1\
  answer <- "Beween -1 and 1" 									#print else if statement\
\} else\{												#else \
  answer <- "Less than -1"									#print else statement\
\}\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs24 \cf0 \'97\'97\'97Vector Operations \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0\fs20 \
var <- c(x1, x2, x3, x4, x5)									Define numeric vectors in R is done through combine function c(x1, x2, x3, \'85, xn)\
is.numeric(var)											Check if var is a numeric vector\
is.integer(var)											Check if var is a integer vector\
is.double(var)											Check if var is a double vector 
\b #vector contains doubles, R default stores double\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 is.character(var)										Check if var is a character vector 
\b #can\'92t convert character to number but can convert number to character
\b0 \
as.list() 
\b OR
\b0  as.data.frame() 
\b OR
\b0  as.double() 
\b OR
\b0  as.numeric() 
\b OR
\b0  as.integer() 
\b 		
\b0 	Convert other data structures into as.want_to_be_data_structure 
\b #Python: x.astype(int)
\b0 \
as.Date(\'93non-standard_format_date\'94, format = \'93%b-%d-%y\'94)					Intake an non-standard date format and convert it into standard yyyy-mm-dd format\
seq(starting_number, ending_number, steps)							Create a numeric sequence from starting number to ending number with steps inclusive\
rep(number | vector | character, number of replications)						Create a vector with the input element with specify number of replications\
sort(vector)											Sort a vector, default in ascending order, decreasing = TRUE will reverse\
rev(vector)											Reverse elements in object\
var[x] 
\b OR
\b0  var[-x] 
\b OR
\b0  var[x:y] 									Select the x-index element from vector, 
\b OR
\b0  select every element except for the x-index element, 
\b OR 
\b0 elements from x to y index\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 var[c(x1, x2, x3)] 
\b OR
\b0  var[c(-x1, -x2)]								w[c(x1, x2, x3)] 
\b OR
\b0  var[c(-x1, -x2)] is the same as w[x1, x2, x3]  
\b OR 
\b0 x[-x1, -x2] as deletion of the input index elements\
var[row, col]											Selecting element in matricies 
\b #var[row,] is the selection of the entire row, var[, col] is the selection of the entire col\

\b0 names(vector) <- name_vector									Assign names to a vector 
\b \cf12 EX[
\b0 \cf0 names(Charlies) <- c(\'93a\'94, \'93b\'94, \'93c\'94, \'93d\'94, \'93e\'94)
\b \cf12 ]
\b0 \cf0 \
sum(vector) 
\b OR
\b0  mean(vector) 
\b OR
\b0  prod(vector)							Sum / Average/ Product(multiply) all the elements in the vector \
vector[vector < 
\b OR
\b0  > 
\b OR
\b0  != 
\b OR
\b0  == value 
\b &
\b0  condition 2 
\b |
\b0  condition 3]				Vector filtering\
paste0(vector1, vector2, \'85.)									Concatenate (add one after another) vectors\
append(value 
\b OR
\b0  vector, vector 
\b OR
\b0  list to be append on)						Append (add) values 
\b OR
\b0  vector into a list 
\b OR
\b0  vector, 
\b #Python: list.append(value)
\fs24 \
\'97\'97\'97Matrix Operations \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0\fs20 \
rbind(vector1, vector2, \'85, vectorn)								Takes multiple vectors and fill each row starting on the first row\
cbind(vector1, vector2, \'85, vectorn)								Takes multiple vectors and fill each col starting on the first col\
matrix(vector, # of rows, # of cols, optional[byrow = T/F])						Takes a vector and bends it to create a matrix, default fills 1st col -> 2nd col -> .., byrow = T makes it fill row first\
m[\'93row name\'94, \'93col name\'94] 
\b OR
\b0  m[row#, col#] 
\b OR
\b0  m[\'93row name\'94, col#] 
\b OR
\b0  m[row#, \'93col name\'94] 
\b 	
\b0 Different ways of accessing specific element in the matrix
\b \cf12 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf14 rownames(matrix) <- row_name_vector								Assign row names to a matrix\
colnames(matrix) <- col_name_vector								Assign col names to a matrix\
m[row, col] <- var										
\b #R allows you to select certain element within the matrix and assign new values to it\

\b0 m1 / m2											Matrix division across two matrices \
t(matrix)											Transpose matrix in R\
colsums(matrix) 
\b OR
\b0  rowsums(matrix)								Takes the sum through the rows 
\b OR
\b0  col in the matrix\
colmeans(matrix) OR rowmeans(matrix)								Takes the average through the rows 
\b OR
\b0  col in the matrix\
m[x:x, y:y]											Subsetting matrix through index 
\b \cf12 EX[
\b0 \cf14 A[1:3, 6:10] subsets matrix A to return new matrix with row 1 to 3 with col 6 to 10
\b \cf12 ]
\b0 \cf0 \
m[c(x1, x2),] 
\b OR
\b0  m[, c(y1, y2), drop = F]								Subsetting the rows or cols from matrix, can use col or row names instead of index as well\
m[row, col] 
\b OR
\b0  m[row,] 
\b OR
\b0  m[, col] 
\b OR
\b0  m[row, col, drop = F]					Passing in values into matrix will return vector in default, the optional argument drop = F will return matrix instead of vector\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs24 \cf0 \'97\'97\'97Function  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0\fs20 \
function_name <- function(input1, input2 input3 = default)\{					Creating function in R\
    #code execute										
\b #Return at the end of function serve the same purpose as python return
\b0 \
    return(result)											\
\}\
\
sapply(v, function(num)\{num * 2\})								Anonymous function, apply anonymous function (num*2) on each elements in v (return vector) 
\b #Python: Lambda operator
\b0 \
sample(x = x1:x2, n)										Generate random 
\i n
\i0  values between range of x1 to x2 \
grepl(\'93keyword_want_to_search_for\'94, character_vector)						Search for the keyword within the character_vector, return logical statement 
\b (TRUE / FALSE)
\b0 \
grep(\'93keyword_want_to_search_for\'94, character_vector)						Search for the keyword within the character_vector, return the index of the found keyword \
Sys.Date()											Returns today in the format of \'93yyyy-mm-dd\'94 as Date object\
strptime(\'93hh:mm:ss\'94, format = \'93%H:%M:%S\'94)							Intakes character vector and convert into timestamps \
filter(df, col_name == condition1, col_name > condition2, col_name < condition3, etc.)		Filter df like using subset function, specify col_name wants to be filtered on and the conditions 
\b \cf12 #Package \'93dplyr\'94.
\b0 \cf0 \
slice(df, row_indices_to_slice)									Slice df horizontally on rows 
\b \cf12 #Package \'93dplyr\'94. EX[\cf0 slice(df, 1:10) will return first two rows of df\cf12 ]
\b0 \cf0 \
arrange(df, col1, col2, col3, \'85 etc.)								Sort df by columns 
\b \cf12 #Package \'93dplyr\'94. EX[\cf0 arrange(df, col1, desc(col2)) returns df sort by col1 then desc(col2) order\cf12 ]
\b0 \cf0 \
select(df, col1, col2, col3, \'85 etc.)								Select specific col from the df 
\b \cf12 #Package \'93dplyr\'94.
\b0 \cf0 \
rename(df, new_col_name = original_col_name)							Rename cols in df 
\b \cf12 #Package \'93dplyr\'94.
\b0 \cf0 \
distinct(df, col_name)										Select distinct(unique) values from df cols 
\b \cf12 #Package \'93dplyr\'94. \cf0 often used with distinct(select(df, col))
\b0 \
mutate(df, new_col = col1 - col2)								Quick way to create new_col based on old column operations 
\b \cf12 #Package \'93dplyr\'94. 
\b0 \cf0 \
transmute(df, new_col = col1 - col2)								Quick way to create and \ul return only the new_col\ulnone  based on old column operations 
\b \cf12 #Package \'93dplyr\'94.
\b0 \cf0 \
summarise(df, new_col = mean 
\b OR
\b0  max 
\b OR
\b0  etc.(col1, na.rm = TRUE))				Perform column-wise calculation (mean, max, min, etc. and remove all NA values) 
\b \cf12 #Package \'93dplyr\'94.
\b0 \cf0 \
sample_n(df, n)											Randomly select 
\i n
\i0  rows from the df 
\b \cf12 #Package \'93dplyr\'94
\b0 \cf0 \
sample_frac(df, n)										Randomly select 
\i n fraction (n = 0.1 means 10%)
\i0  rows from the df 
\b \cf12 #Package \'93dplyr\'94
\b0 \cf0 \
gather(df, key, pair, cols_want_to_gather_into_key-value_pair)					Collapse multiple cols into key-value pairs 
\b \cf12 #Package \'93tidyr\'94.
\b0 \cf0 \
spread(df, key, pair)										Uncollapse gathered data (key-value pairs) into multiple cols 
\b \cf12 #Package \'93tidyr\'94.
\b0 \cf0 \
separate(df, col_desired_to_be_separated, c(\'91col1\'92, \'91col2\'92), sep = \'93separation character\'94)		Separate elements from 1 col to 2+ cols based on separation character, default = non-alphabetical characters 
\b \cf12 #Package \'93tidyr\'94.
\b0 \cf0 \
unite(df, new_col_name, col1, col2, sep = \'93separation character\'94)				Unite col1 & col2 elements into one col, join with separation character 
\b \cf12 #Package \'93tidyr\'94.
\b0 \cf0 \
iris %>% 											R piping operator, takes output of one command and use it as input for the next, connect by %>%\
   subset(iris$col_name == value) %>%								
\b #similar to linux pipping command \'93|\'94
\b0 \
   tail(n = 5) %>%										
\b #Same as summary(tail(subset(df, df$col_name == value), n = 5))\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0    summary()\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs24 \cf0 \'97\'97\'97Data Frame  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0\fs20 \
read.csv(file.choose()) 
\b OR
\b0  read.csv(\'93file_name\'94)							Read 
\b \cf23 csv
\b0 \cf0  file in R, file.choose() prompts window to choose file, if same path, can just type in file name 
\b #Python: pd.read_csv()
\b0 \
write.csv(df, file = \'93file_name_want_to_be_saved_as.csv\'94)					Write a 
\b \cf23 csv
\b0 \cf0  file in R, #Python: pd.to_csv\
excel_sheets(\'93file_name\'94) 
\b 									Returns vector referencing sheets(tabs) in excel file \cf12 #Package \'93readxl\'94 allows read in excel file in R
\b0 \cf0 \
read_excel(\'93file_name\'94, sheet = \'93sheet_vector_output_from_above\'94)				Read 
\b \cf24 excel
\b0 \cf0  sheets in R, sheet argument takes excel_sheet(\'93file_name\'94) output\
entire.workbook <- lapply(excel_sheets(\'93file_name\'94), read_exce, path = \'93file_name\'94)		Read entire 
\b \cf24 excel
\b0 \cf0  file with all sheets 
\b #list-apply(get all sheet names, apply read_excel on each, along the excel file)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 lapply(vector, function) 
\b OR
\b0  sapply(vector, function) 
\b OR
\b0  vapply(vector, function)			List.apply applies the function onto each element in the vector, returns a list 
\b #sapply & vapply returns vector, matrix or array
\b0   \
getwd()												Get current working directory, same as unix command pwd\
setwd(\'93path\'94)											Set the working directory path 
\b \cf12 EX[
\b0 \cf0 setwd(\'93\\Users\\IvanC\\R\\\'94)
\b \cf12 ] #with working directory
\b0 \cf0 \
nrow(df)											Returns the number of rows in the data frame 
\b #python: df.shape()
\b0 \
ncol(df)												Returns the number of cols in the data frame 
\b #python: df.shape()
\b0 \
head(df, n = 6)											Returns top 6 rows (default) of the data frame 
\b #python: df.head()
\b0 \
tails(df, n = 6)											Returns the last 6 rows (default) of the data frame 
\b #python: df.tail()
\b0 \
str(df)												
\b STRUCTURE()
\b0  Returns a quick debrief of the data frame 
\b #python: df.describe()
\b0 \
summary(df)											Returns a summary of the data frame\
df[row, col] 
\b ==
\b0  df[[row, col]]									Extract elements from the df 
\b #remain df for using df[row,], drop dimension into vector uses df[, col, drop = F], or [[\'93col\'94]]
\b0 \
df$col_name 
\b ==
\b0  df[, \'93col_name\'94]	 
\b ==
\b0  df[, col#] 
\b ==
\b0  df[[\'93col_name\'94]]					Select the col 
\b OR
\b0  row from the data frame and output it as vector form
\b  \cf12 #df[\'93col_name\'94] OR df[col#] returns df form
\b0 \cf0 \
levels(df$col_name)										df$col_name selects the specific col, and levels would return the categorical description of the levels 
\b \cf12 EX[
\b0 \cf0 high, medium, low
\b \cf12 ]
\b0 \cf0 \
df$col_name * 
\b OR
\b0  + 
\b OR
\b0  / 
\b OR
\b0  - df$col_name							dataframe basic addition, subtraction, division, multiplication operations\
df$new_col_name <- vector 
\b OR
\b0  col_values							Create new col with values into df 
\b #if input insufficient to # of rows, vector will recycle to fill in (has to multiple of row#)
\b0 \
df$col_name <- NULL										Remove col from data frame\
df[df$col_name < 
\b OR
\b0  > 
\b OR
\b0  != 
\b OR
\b0  == value 
\b &
\b0  condition 2 
\b |
\b0  condition 3]				Filtering data frame with input condition(s), df$col_name </>/!=/== value is the condition, this condition can be store as a boolean \
subset(df, col_name_want_to_search_in %in% vector_contain_keywords_for_search)		Subsetting a data frame based on keywords vector search in a particular column(T/F) vector first\
subset(df, col_name_want_to_search_in < 
\b OR
\b0  != 
\b OR
\b0  == value 
\b & OR |
\b0  condition 2)		Subsetting a data frame based on condition input into the col_want_to_search_in 
\b \cf12 EX[
\b0 \cf0 subset(df, subset = rain == TRUE)
\b \cf12 ]
\b0 \cf0 \
any(is.na(df 
\b OR
\b0  df$col))	 <- replacement data(mean or other values)				Returns a TRUE 
\b OR
\b0  FALSE statement whether the df 
\b OR
\b0  df$col has any missing data, then assign with new values\
order(df$col_name) 
\b OR
\b0  order(-df$col_name)							Returns vector with index orders of rankings 
\b \cf12 EX[
\b0 \cf0 [2 1 5] is index 2 value lowest & index 5 highest, -df[\'93col_name\'94] reverse order
\b \cf12 ]
\b0 \cf0 \
df <- data.frame(col_name 1 = vector1, col_name2 = vector2, col_name3 = vector3\'85)		Creating data frame from vectors, same as creating matrix with vectors using rbind() or cbind()\
merge(df1, df2, by.x = \'93df1_col\'94, by.y = \'93df2_col\'94)							Merge two data frames into one by joining on columns, x refers to df1, y refers to df2\
df$col_name <- factor(df$col_name, 								Turn numeric elements in a df col into categorical variables, integer/float into string\
			ordered = True, levels == c(define order vector))		 		
\b #ordered = T, levels = c(\'93hot\'94, \'93med\'94, cold\'94) gives the factor rankings, specify by the levels vector
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs24 \cf0 \'97\'97\'97List  \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\b0\fs20 \
list(vname = vector, mname = matrix, dname = df)						List in R can store vector, matrix, and df into a single var (name it when parse in), index through double bracket [1], [2], [3]\
list$element_in_list 
\b OR
\b0  list[]\'92element_name]] OR list[\'91element_name\'92]				Indexing and selecting elements in list, $element 
\b AND
\b0  [[\'91element_name]] returns numeric vector, [\'91element_name\'92] return list\
c(list1, list2)											combine two lists together at one end of the other.
\b\fs24 \
\'97\'97\'97Data Visuzaliation  ({\field{\*\fldinst{HYPERLINK "https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf"}}{\fldrslt https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf}})\'97\'97\'97\'97\'97\'97
\b0\fs20 \
qplot(data = df, x = col1, y = col2, size = I(value), color = I(\'93b/r/g..\'94), geom = (\'93boxplot\'94)		qplot function from ggplot2, quick visualization for data frame, alpha is transparency in 0-1 scale\
	shape = I(1-25 different shapes), alpha = I(), main = \'93plot title\'94)				
\b #color = col3, same as dragging a parameter onto the color filter in Tableau
\b0 \
\
ggplot(data = df,
\i 					
\i0 					ggplot in R, parse in data, define aes(x,y, and optional layer), geom_point() is 
\b \cf25 \ul \ulc25 scatter plot
\b0 \cf0 \ulnone  
\b \cf12 EX[
\i\b0 \cf0 geom_line(size = 1), define
\i0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx20040\pardirnatural\partightenfactor0
\cf0        aes(x = x_var, y = y_var, color = 3rd_var, size = 4th_var)) + 					l
\i ine size
\i0 \cf12 ]\cf0 , geom_smooth() is line with CI	\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	geom_point(alpha = 0.1, size = 1) + geom_smooth() +					
\b #aes is the function in ggplot that takes mapping variables on plot [x, y, color, size]
\b0 	xlab(\'93x_axes_title\'94) + ylab(\'93y_axes_title\'94)						
\b #xlab and ylab defines the x and y axes title\
	
\b0 xlim(start, end) + ylim(start, end)								
\b #xlim and ylim sets x and y axes coordinates 
\b0 \
			\
p <- ggplot(data = df, \
       aes(x = x_var, y = y_var, color = 3rd_var, size = 4th_var))					Creates data layer with defined x and y and other optional variables\
p + geom_point(aes(size = new_variable, color = new_variable2))				
\b #This creates an incident of using aes() function in geom_points() to override the p variables, and creates a one timed\
       
\b0 + scale_color_gradient(low = \'93color1\'94, high = \'93color2\'94)
\b 					plot with the overridden variables. #scale_color_gradient() specifies color gradient
\b0 \
\
ggplot(data = df, aes(x = x_var)) + 								Creates 
\b \cf25 \ul \ulc25 histogram
\b0 \cf0 \ulnone  with bin width set as value input, histogram does not require y_variable\
       geom_histogram(binwidth = value, fill = \'93color\'94, aes(fill = 2nd_var), color = \'93color\'94)		
\b #fill = \'93color\'94 sets the entire graph to a color, aes(color = 2nd_var) maps it on another variable, color sets border colors
\b0 								\
ggplot(data = df, aes(x = categorical_var, y = 2nd_var, color = 3rd_var)) +				Creates 
\b \cf25 \ul \ulc2 box plot
\b0 \ulnone  \cf0 in R, x needs to be categorical variable\
        geom_boxplot(size = box_size_value, alpha = value) + geom_jitter()				
\b #size inside geom_boxplot() sets box plot border size, geom_jitter() adds random points on each box plot background
\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 ggplot(data = df, aes(x = var1, y = var2)) + 							Creates 
\b \cf25 \ul \ulc25 2d visualization heat-map
\b0 \cf0 \ulnone  like graph (based on frequency of occurance) with var1 and var2\
        geom_bin2d(binwidth = c(x1, x2)) 
\b OR
\b0  geom_hex() 
\b OR
\b0  geom_density2d()			
\b #binwidth affects the resolution of the heat map, default is set to be c(1,1)
\b0 \
        scale_fill_gradient(low = \'93color1\'94, high = \'93color2\'94)						
\b #scale_fill_gradient() specifies color gradient
\b0 \
\
ggplot(data = df, aes(x = var_x, y = var_y, color = 3rd_var)) +					Facet_grid() creates row or col separations on each categorical variables 
\b #acting like pages on Tableau
\b0 \
        geom_point(size = 3) + 									
\b #facet_grid(var4~.) facets by row(x), facet_grid(. ~var5) facets by col(y)
\b0 \
        facet_grid(var4~.) 
\b OR
\b0  facet_grid(.~var5) 
\b OR
\b0  facet_grid(var4~var5)				
\b #facet_grid(var4~var5) will create both row and col separation, \cf25 ##acting like sns.pairplot()
\b0 \cf0 				\
ggplot(data = df, aes(x = var1, y = var2, size = var3, color = var4)) +				Zoom in onto particular c(start, end) vector defined window on the graph\
        geom_point() + coord_cartesian(xlim 
\b OR
\b0  ylim = c(start, end))          				
\b #coord_cartesian(xlim = c(start, end)) is the function that takes a length of 2 vector (start & end) and zoom in on graph
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\i \cf0   (+)  coord_fixed(ratio = 1/3)	
\i0 								
\b #set \ul \ulc2 aspect ratio\ulnone  of the output graph (1/3 means 3x to 1y ratio)
\b0 \
\
ggplot(data = df, aes(x = var1, y = var2) + \
        xlab(\'93x_axis_title\'94) + ylab(\'93y_axis_title\'94) +							\
        ggtitle(\'93plot_title\'94)										
\b #set plot title, can use theme to set title\'92s font and color
\b0 \
  
\i (+) theme_dark()										
\i0\b \ul \ulc2 #pre_set plot_theme, more pre_set themes in \cf12 \ulc2 Package \'93ggthemes\'94\cf0 \ulnone \

\b0         theme(axis.title.x = element_text(color = \'93color\'94, size = value),				
\b #set x title\'92s font and color\

\b0 	      axis.title.y = element_text(color = \'93color\'94, size = value),				
\b #set y title\'92s font and color\

\b0 	      axis.text.x = element_text(size = value),						
\b #set x axis coordinate\'92s font and color\

\b0 	      axis.text.y = element_text(size = value))						
\b #set y axis coordinate\'92s font and color
\b0 \
	      legend.title = element_text(size = value),						
\b #set legend title\'92s font and color
\b0 \
	      legend.text = element_text(size = value),						
\b #set legend text\'92s font and color\

\b0 	      legend.position = c(1, 1),								
\b #set legend position (0,0 is bottom-left, 1,1 is upper-right)
\b0 \
	      legend.justification = c(1, 1),								
\b #justify legend position, must use to accompany legend.position
\b0 \
	      plot.title = element_text(color = \'93color\'94, size = value, family = \'93Courier\'94))\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 ##add ? OR help(\'93topic\'94) OR help.search(\'93topic\'94) in front of R functions will pull up the help page
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b\fs24 \cf12 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\cf2 \ul \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf2 Statistics
\fs24 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0\fs20 \cf0 \ulnone -	
\b Probability mass function (PMF)
\b0  - maps from values to its probability, a probability is a frequency expressed as a fraction of the sample size (1, 2, 2, 3, 5) \'97> ([1:0.2], [2:0.4], [3:0.2], 	[5:0.2])\
-
\b 	Cumulative distribution function (CDF)
\b0  - function that maps from a value to its percentile rank, (1, 2, 2, 3, 5) \'97> ([0:0], [1:0.2], [2:0.6], [3:0.8], [5:1])\
-	
\b Interquartile range (IQR)
\b0  - a measure of the spread of a distribution between 75th to 25th percentiles\
-	
\b Complementary CDF (CCDF)
\b0  - function(1 - CDF(x)) on the log scale\
-	**When 
\b \cf26 \ul \ulc26 p-value is smaller
\b0 \cf0 \ulnone  than alpha (0.05 or 0.1), 
\b \cf26 \ul events are unlikely to occur by chance (meaning statistically significant)\ulnone .
\b0 \cf0 **\
-	**When 
\b \cf26 \ul R^2
\b0 \cf0 \ulnone  value for the model
\b \cf26 \ul  is small
\b0 \cf0 \ulnone , means that 
\b \cf26 \ul the variable doesn\'92t account for a substantial part of the variation
\b0 \cf0 \ulnone .**\
-	
\b Time Series Analysis
\b0  uses 
\b Moving Averages
\b0 , which divides the series into overlapping regions called windows, and computes the average of the values in each window.\
-	
\b Time Series Analysis
\b0  also applies 
\b Exponentially-Weighted Moving Average (EWMA)
\b0 , which computes weighted average where the most recent value has the highest weight and 	the weights for previous values drop off exponentially.\
-	
\b Time
\b0  
\b Series
\b0  
\b Analysis
\b0  employs 
\b Serial
\b0  
\b Correlation
\b0  with lag as the shift to evaluate corr (Correlation in Python) from one value to its next value.\
}